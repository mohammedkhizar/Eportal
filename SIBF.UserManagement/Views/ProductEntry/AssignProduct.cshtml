@model SIBF.UserManagement.Models.AssignProductModel

@{
    ViewBag.Title = "AssignProduct";
}
<div class="container">
    <div class="row">
        <h2>Assign Product To User</h2>
        @if (ViewBag.SuccessMsg != null)
        {
            <p class="text-info">@ViewBag.SuccessMsg</p>
        }
        else if (ViewBag.Failuremessage != null)
        {
            <p class="text-danger">@ViewBag.Failuremessage</p>
        }
        <p class="text-danger" id="validationMsg"></p>
        <hr />
        <div class="col-lg-6">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    

                    <div class="form-group">
                        @Html.LabelFor(model => model.FormSubmit.CategoryID, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.DropDownListFor(model => model.FormSubmit.CategoryID, new SelectList(ViewBag.CategoryList, "CategoryID", "CategoryName", 0), "Please Select Category", new { @class = "form-control" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.FormSubmit.SubCategoryID, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.DropDownListFor(model => model.FormSubmit.SubCategoryID, new SelectList(ViewBag.SubCategoryList, "SubCategoryID", "SubCategoryName", 0), "Please Select Sub-Category", new { @class = "form-control" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.FormSubmit.ProductID, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.DropDownListFor(model => model.FormSubmit.ProductID, new SelectList(ViewBag.ProductList, "ProductID", "ProductName", 0), "Please Select Product", new { @class = "form-control" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.FormSubmit.AvaliableQuantity, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.FormSubmit.AvaliableQuantity, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", Value = "0", id = "AvaliableQuantityValue" } })
                            @Html.ValidationMessageFor(model => model.FormSubmit.AvaliableQuantity, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.FormSubmit.AvaliableQuantityDeatils, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8 AvaliableQuantityDeatils" id="AvaliableQuantityDeatilsByID">
                            <table class="table table-responsive table-bordered table-striped">
                                <tbody>
                                    <tr><th>#</th><th>Quanity</th><th>Assigned Quanity</th><th>Manufacture Date</th><th>Expire Date</th></tr>
                                </tbody>
                                <tbody id="appedproductlist"></tbody>
                            </table>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.FormSubmit.Quantity, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @*@Html.HiddenFor(model => model.FormSubmit.RowID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", Value = "0" } })*@
                            @Html.HiddenFor(model => model.FormSubmit.AssignedQuanity, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.EditorFor(model => model.FormSubmit.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.FormSubmit.Quantity, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.FormSubmit.UserName, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.DropDownListFor(model => model.FormSubmit.UserName, new SelectList(ViewBag.UsersInfo, "UserName", "UserName"), new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-6">
                            @Html.HiddenFor(model => model.FormSubmit.RowID)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-4 col-md-8">
                            <input type="submit" id="submit" value="Create" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="col-lg-6">
            <p class="alert-info" id="deleteMsg"></p>
            @using (Html.BeginForm())
            {

                <table class="table table-responsive table-bordered table-striped" style="background-color:#fff;">
                    <tr>
                        <th style="text-align: center;">
                            Category
                        </th>
                        <th style="text-align: center;">
                            Sub Category
                        </th>
                        <th style="text-align: center;">
                            Product Name
                        </th>
                        <th style="text-align: center;">Assigned Quantity</th>
                        <th style="text-align: center;">
                            Assigned Date
                        </th>
                        <th style="text-align: center;">
                            User Name
                        </th>
                        <th>Action</th>
                        <th>Return</th>
                    </tr>

                    @foreach (var item in Model.DisplayData.AllProductAssignedData)
                    {
                        string allInfo = item.ProductName.Trim() + '^' + item.ProductId + '^' + item.Quantity
                                         + '^' + item.UserName + '^' + item.RowId + '^' + item.StockID
                                         + '^' + item.CategoryId + '^' + item.CategoryName + '^' + item.SubCategoryId 
                                         + '^' + item.SubCategoryName;
                        @Html.HiddenFor(modelItem => allInfo, new { id = "allInfo_" + @item.RowId })
                        <tr id="row_@item.RowId">
                            <td id="col1_@item.RowId">
                                @Html.DisplayFor(modelItem => item.CategoryName)
                            </td>
                            <td id="col2_@item.RowId">
                                @Html.DisplayFor(modelItem => item.SubCategoryName)
                            </td>
                            <td id="col3_@item.RowId">
                                @Html.DisplayFor(modelItem => item.ProductName)
                            </td>
                            <td id="col4_@item.RowId">
                                @Html.DisplayFor(modelItem => item.Quantity)
                            </td>
                            <td id="col5_@item.RowId">
                                @Html.DisplayFor(modelItem => item.AssignedDate)
                            </td>
                            <td id="col6_@item.RowId">
                                @Html.DisplayFor(modelItem => item.UserName)
                            </td>
                            @*<td>
                                <a href="#" class="editElementByIdFromTable" id="edit_@item.RowId">
                                    <img src="@Url.Content("~/Content/Images/edit.ico")" , alt="Delete" />
                                </a>
                            </td>*@
                            <td class="text-center">
                                <a href="#" class="deleteElement" id="@item.RowId">
                                    <img src="@Url.Content("~/Content/Images/delete.ico")" , alt="Delete" />
                                </a>
                            </td>
                            <td>
                                @if (@item.Quantity != 0)
                                {
                                    @Html.ActionLink("Return Item", "ReturnStockRequirment", "Requirement", new { ReturnID = @item.RowId }, null)
                                }
                                
                            </td>
                        </tr>
                    }
                </table>
                <br />

            }
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        $("#FormSubmit_RowID").val('0');
        $(".deleteElement").click(function () {
            selRow = this.id;
            seletedData = $.trim($("#allInfo_" + selRow).val());
            var selRowInfo = seletedData.split("^");
            var stockID = selRowInfo[5];
            var quantity = selRowInfo[2]; // alert("Delete : " + stockID + ":" + quantity);
            seletedElementData=$.trim($("#col3_"+selRow).html());
            resultClick = confirm("You are sure you want to delete : " +seletedElementData);
            if (resultClick == true) {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("DeleteAssignedProduct")',
                    dataType: 'json',
                    data: {
                        id: selRow,
                        stockID: stockID,
                        quantity: quantity
                    },
                    success: function (data) {
                        if (data == true) {
                            setRowSeleted = "#row_" + selRow;
                            $(setRowSeleted).remove();
                            $("#deleteMsg").html('Deleted successfully');
                        }
                        else {
                            $("#deleteMsg").html('Delete is not possiable some error try again!');
                        }
                    },
                    error: function (ex) {
                        var r = jQuery.toString(response.responseText);
                        alert("Message: " + r.Message);
                        alert("StackTrace: " + r.StackTrace);
                        alert("ExceptionType: " + r.ExceptionType);
                    }
                });
            }
            else {
                return false;
            }
        });


        $(".editElementByIdFromTable").click(function () {
            selRow = this.id;
            var selRow = selRow.split("_");
           
            seletedName = $.trim($("#col1_" + selRow[1]).html());
            seletedData = $.trim($("#allInfo_" + selRow[1]).val());
            var selRowInfo = seletedData.split("^");
            resultClick = confirm("You are sure you want to edit : " + selRowInfo[0]);
            if (resultClick == true)
            {
                $("#FormSubmit_RowID").val(selRow[1]);
                
                //item.ProductName.Trim() 0 + '^' + item.ProductId 1+ '^' + item.Quantity 2
                //+ '^' + item.UserName 3 + '^' + item.RowId 4 + '^' + item.StockID 5
                //+ '^' + item.CategoryId 6 + '^' + item.CategoryName 7 + '^' + item.SubCategoryId 8
                //+ '^' + item.SubCategoryName 9;

                $("#FormSubmit_CategoryID").prepend("<option value='" + selRowInfo[6] + "'>" + selRowInfo[7] + "</option>").val(selRowInfo[7]);
                $("#FormSubmit_SubCategoryID").prepend("<option value='" + selRowInfo[8] + "'>" + selRowInfo[9] + "</option>").val(selRowInfo[9]);

                $("#FormSubmit_ProductID").prepend("<option value='" + selRowInfo[1] + "'>Select Option</option>").val(selRowInfo[1]);
                $("#FormSubmit_ProductID").prepend("<option value='" + selRowInfo[1] + "'>" + selRowInfo[0] + "</option>").val(selRowInfo[1]);
                $("#FormSubmit_UserName").prepend("<option value='" + selRowInfo[3] + "'>" + selRowInfo[3] + "</option>").val(selRowInfo[3]);
                $("#FormSubmit_Quantity").val(selRowInfo[2]);
                $("#submit").val("Edit");
                return false;
            }
            return false;
        });

        $("#FormSubmit_ProductID").change(function () {
            var Quantity = 0;
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetAvaliableQuantity")',
                dataType: 'json',
                data: { id: $("#FormSubmit_ProductID").val() },
                success: function (data) {
                   // console.log('tables: ' + JSON.stringify(data)); return false;
                    $('select#AvaliableQuantityDeatilsByID').empty();
           
                    $.each(data, function (key, item) {
                       mdate = setDate(item.ManufactureDate);
                       edate = setDate(item.ExpiryDate);
                       Quantity = item.Quantity + Quantity;
                       setQid = "Quanity_" + item.StockID;
                       setAssQid = "AssignedQty_" + item.StockID;
                       row = $("<tr></tr>");
                       col1 = $("<td><input type='checkbox' class='clickaqnty' id='" + item.StockID + "' value='" + item.StockID + "'></td>");
                       col2 = $("<td id='" + setQid + "'>" + item.Quantity + "</td>");
                       col3 = $("<td id='" + setAssQid + "'>0</td>");
                       col4 = $("<td>" + mdate + "</td>");
                       col5 = $("<td>" + edate + "</td>");
                       row.append(col1, col2, col3, col4, col5).prependTo("#appedproductlist");

                    });
            
                    $("#AvaliableQuantityValue").val(Quantity);
                },
                error: function (ex) {
                    var r = jQuery.toString(response.responseText);
                    alert("Message: " + r.Message);
                    alert("StackTrace: " + r.StackTrace);
                    alert("ExceptionType: " + r.ExceptionType);
                }
            });
});

        $(document).on('click', ".clickaqnty", function () { 
            clrdiv = ''; setallinfo = '';
            qty = 0; tot = 0; //$("#AssignedQty_" + seledtedID).text(clrdiv);
            $("#FormSubmit_AssignedQuanity").val('');
            $(".clickaqnty:checked").each(function () {
                seledtedID = $(this).attr('id');
                qty = $("#Quanity_" + seledtedID).text();
                $("#AssignedQty_" + seledtedID).text(qty);
                tot = parseInt(qty) + parseInt(tot);
                qty = $("#Quanity_" + seledtedID).text();
                setallinfo = setallinfo+seledtedID + "-" + qty + ",";
            });
            $("#FormSubmit_Quantity").val(tot);
            ssetallinfo = setallinfo.slice(0, -1);
            $("#FormSubmit_AssignedQuanity").val(ssetallinfo);
        });

        $("#FormSubmit_Quantity").blur(function () {
            assignedQty = $("#FormSubmit_Quantity").val();
            avaliableQty = $("#AvaliableQuantityValue").val();
            remainQty = assignedQty; setallinfo = '';
            $('input:checkbox').prop('checked', false);
            $("#FormSubmit_AssignedQuanity").val('');
            qty = 0; tot = 0;
            if (parseInt(assignedQty) != 0) {
                if (parseInt(assignedQty) <= parseInt(avaliableQty)) {

                    $('input[type=checkbox]').each(function () {
                        seledtedID = $(this).attr('id');
                        qty = $("#Quanity_" + seledtedID).text(); 
                        if (parseInt(qty) <= parseInt(remainQty)) {
                            
                            remainQty = parseInt(remainQty) - parseInt(qty);
                            $("#AssignedQty_" + seledtedID).text(qty);
                            $("#" + seledtedID).prop('checked', true);
                            setallinfo = seledtedID + "-" + qty + ",";
                            //return false;
                        }
                        else
                        {
                            if (parseInt(remainQty) >= 0)
                            {
                                $("#AssignedQty_" + seledtedID).text(remainQty);
                                $("#" + seledtedID).prop('checked', true);
                                setallinfo = setallinfo + seledtedID + "-" + remainQty;
                                return false;
                            }
                        }
                      
                    });
                }
                else {
                    $("#FormSubmit_Quantity").val(0);
                    alert("Assigning quantity can't be grater then avaliable quanity");
                    return false;
                }
            }
            $("#FormSubmit_AssignedQuanity").val(setallinfo);
            /*else
            {
                alert("Please fill");
                return false;
            }*/
        });
        $("#FormSubmit_Quantity").focus(function () {
            clsVal = '';
            $("#validationMsg").html(clsVal);
        });

        /*
        $("#FormSubmit_Quantity").blur(function () {
            AvaliableQuantity = $("#AvaliableQuantityValue").val();
            EnterQuantity = $("#FormSubmit_Quantity").val();
            if (EnterQuantity <= AvaliableQuantity)
            {
                return true;
            }
            else if(EnterQuantity > AvaliableQuantity || EnterQuantity == 0)
            {
                clsVal = '';
                $("#validationMsg").html("Assigned quantity should not grater then or equal to zero!");
                $("#FormSubmit_Quantity").val(clsVal);
                return false;
            }
        });
        */

        $("#FormSubmit_CategoryID").change(function () {
            var id = this.value;
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetSubCategoryByID")',
                dataType: 'json',
                data: {
                    id: id
                },
                success: function (data) {
                    $('select#FormSubmit_SubCategoryID').empty();
                    $('#FormSubmit_SubCategoryID').append(
                    $('<option></option>').val('').html('Please Select Sub Category'));
                    $.each(data, function (key, item) {
                        var catdetails = item.SubCategoryName;
                        //var catdetails =catdetails.substring(0,50);
                        $('#FormSubmit_SubCategoryID').append(
                        $('<option></option>').val(item.SubCategoryId).html(catdetails));
                    });
                    // GetSubCateogryDataByID
                    // console.wrtie(data);
                    // console.log('tables: ' + JSON.stringify(data));

                },
                error: function (ex) {
                    var r = jQuery.toString(response.responseText);
                    alert("Message: " + r.Message);
                    alert("StackTrace: " + r.StackTrace);
                    alert("ExceptionType: " + r.ExceptionType);
                }
            });
        });

        $("#FormSubmit_SubCategoryID").change(function () {
            var id = this.value;
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetProductBySubCategoryID")',
                dataType: 'json',
                data: {
                    id: id
                },
                success: function (data) {
                    $('select#FormSubmit_ProductID').empty();
                    $('#FormSubmit_ProductID').append(
                    $('<option></option>').val('').html('Please Select Product'));
                    $.each(data, function (key, item) {
                        var catdetails = item.ProductName;
                        //var catdetails =catdetails.substring(0,50);
                        $('#FormSubmit_ProductID').append(
                        $('<option></option>').val(item.ProductID).html(catdetails));
                    });
                    // GetSubCateogryDataByID
                    // console.wrtie(data);
                    // console.log('tables: ' + JSON.stringify(data));

                },
                error: function (ex) {
                    var r = jQuery.toString(response.responseText);
                    alert("Message: " + r.Message);
                    alert("StackTrace: " + r.StackTrace);
                    alert("ExceptionType: " + r.ExceptionType);
                }
            });
        });

        function setDate(date)
        {
            var completedDateText =date;
            var completedDate = new Date(parseInt(completedDateText.replace("/Date(", "").replace(")/")));
            var dd = completedDate.getDate();
            var mm = completedDate.getMonth() + 1; //January is 0! 
            var yyyy = completedDate.getFullYear();
            if (dd < 10) { dd = '0' + dd }
            if (mm < 10) { mm = '0' + mm }
            return ( dd + '/' + mm + '/' + yyyy);
        }

});
</script>
